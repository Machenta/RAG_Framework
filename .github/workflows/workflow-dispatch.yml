name: Build, Release and Publish Package

on:
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: 'Publish to PyPI after release'
        required: true
        type: boolean
        default: false
      publish_to_testpypi:
        description: 'Publish to TestPyPI first'
        required: true
        type: boolean
        default: true

permissions:
  contents: write  # needed to create releases
  id-token: write  # needed for trusted publishing to PyPI

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper versioning

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pytest pytest-asyncio pytest-cov ruff mypy

      - name: Lint with ruff
        run: |
          ruff check .
          ruff format --check .

      - name: Type check with mypy
        run: |
          mypy rag_shared rag_api_core --ignore-missing-imports || true

      - name: Run tests
        run: |
          pytest tests/ -v --cov=rag_shared --cov=rag_api_core --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build-package:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package (wheel and sdist)
        run: |
          python -m build --sdist --wheel
          ls -la dist/

      - name: Check package quality
        run: |
          twine check --strict dist/*
          # Verify package contents
          python -m zipfile -l dist/*.whl | head -20

      - name: Set version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep '^version =' pyproject.toml | sed -E 's/version = "(.*)"/\1/')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=v$VERSION" >> "$GITHUB_OUTPUT"
          echo "ðŸ“¦ Package version: $VERSION"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  create-release:
    needs: build-package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Create GitHub Release and upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=${{ needs.build-package.outputs.tag }}
          VERSION=${{ needs.build-package.outputs.version }}
          
          # Generate release notes
          cat > release_notes.md << EOF
          # RAG Framework ${VERSION}
          
          ## ðŸš€ Installation
          
          ### From PyPI (when published)
          \`\`\`bash
          pip install rag-framework==${VERSION}
          \`\`\`
          
          ### From this release
          \`\`\`bash
          pip install https://github.com/${{ github.repository }}/releases/download/${TAG_NAME}/rag_framework-${VERSION}-py3-none-any.whl
          \`\`\`
          
          ## ðŸ“¦ Package Contents
          - \`rag_shared\`: Core shared utilities and components
          - \`rag_api_core\`: API core functionality
          
          ## ðŸ”’ Security
          This release supports Azure System-Assigned Managed Identity for all Azure services.
          
          ## ðŸ“„ Full Changelog
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          
          ---
          *Automated release of RAG Framework ${VERSION}*
          EOF
          
          # Create release
          gh release create "$TAG_NAME" dist/*.whl dist/*.tar.gz \
            --title "RAG Framework $VERSION" \
            --notes-file release_notes.md \
            --verify-tag || gh release create "$TAG_NAME" dist/*.whl dist/*.tar.gz \
            --title "RAG Framework $VERSION" \
            --notes-file release_notes.md

  publish-testpypi:
    needs: [build-package, create-release]
    if: ${{ github.event.inputs.publish_to_testpypi == 'true' }}
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/rag-framework

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

      - name: Test installation from TestPyPI
        run: |
          sleep 30  # Wait for package to be available
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ rag-framework
          python -c "import rag_shared; import rag_api_core; print('âœ… TestPyPI installation successful!')"

  publish-pypi:
    needs: [build-package, create-release, publish-testpypi]
    if: ${{ github.event.inputs.publish_to_pypi == 'true' && (success() || needs.publish-testpypi.result == 'skipped') }}
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/rag-framework

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Create summary
        run: |
          VERSION=${{ needs.build-package.outputs.version }}
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # ðŸŽ‰ Release Summary
          
          ## Package: RAG Framework v${VERSION}
          
          ### âœ… Published to:
          - GitHub Releases: [v${VERSION}](https://github.com/${{ github.repository }}/releases/tag/v${VERSION})
          - PyPI: [rag-framework](https://pypi.org/project/rag-framework/${VERSION}/)
          
          ### ðŸ“¦ Installation:
          \`\`\`bash
          pip install rag-framework==${VERSION}
          \`\`\`
          
          ### ðŸ”— Links:
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          EOF
